@import '_utils.scss';
@import '_defines.scss';

$button-bg: #f0f0f0;
$button-fg: black;
$button-border-width: 3px;
$round-button-width: 26px;

$primary-col: #177fb5;
$danger-col: #d43f3a;

$anim-time: 0.3s;

.btn {
    border-bottom-width: $button-border-width;
    padding: 6px 12px (6px - $button-border-width);
    @include transition-property(color, background-color, border-bottom-color);
    @include transition-duration($anim-time);

    &.disabled, &[disabled] {
        opacity: 1;
        color: #aaa;
    }

    /* N/A button etc. */
    &.btn-round {
        border-radius: 100%;
        width: $round-button-width;
        height: $round-button-width;
        padding: 0;
        line-height: $round-button-width - 1px;
        font-size: $round-button-width - 8px;
        margin-left: $round-button-width / 3;
    }
}

.input-group-addon {
    border-color: transparent;
    &.text-muted {
        color: #888;
    }
}

.form-control {
    border-color: transparent;
    background: $button-bg;
    box-shadow: none;
    border-bottom-width: $button-border-width;
    padding-bottom: 6px - $button-border-width;
    height: auto;
    @include transition-property(color, background-color, border-bottom-color);
    @include transition-duration($anim-time);
}
.form-control:focus {
    box-shadow: none;
}

textarea.autoresize {
    // Actual resizing is done in a script.
    overflow: hidden;
    resize: none;
    min-height: 60px;
}
div[textarea-label] {
    /* Hovers a label over a textarea */
    position: relative;
    &:before {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        content: attr(textarea-label);
        text-align: center;
        line-height: 80px;
        font-size: 40px;
        font-weight: bold;
        opacity: 0.2;
        pointer-events: none;
    }
    textarea.autoresize {
        min-height: 80px;
    }
}

.input-group {
    margin-bottom: 10px;
}
.input-group-addon {
    background-color: $button-bg
}

.input-group-btn {
    // Extension to Bootstrap rules to allow multiple button groups.
    &:not(:first-child):not(:last-child) {
        >.btn {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }
    }
}

.btn-default, .btn-default.active, .btn-default[disabled],
.form-control, .form-control.active {
    color: lighten($button-fg, 30%);
    background-color: $button-bg;
    border-color: transparent;

    &[disabled] {
        color: darken($button-bg, 20%);
        border-width: 1px;
        padding-bottom: 6px - 1px;
        border-color: transparent;
    }

    &:hover, &:active, &.active:focus, &:focus, &:active.focus, &:active:focus {
        outline: none;
        border-color: transparent;
    }
    &:hover, &.active:focus, &:focus {
        &:not([disabled]) {
            background-color: lighten($button-bg, 3%);
            color: $button-fg;
            border-bottom-color: rgba($primary-col, 0.5);
        }
    }
    &:active, &.active, &.active:focus, &:active.focus, &:active:focus {
        box-shadow: none;
        color: $button-fg;
    }
    .fa-badge {
        @include text-shadow-outline($button-bg);
    }
}
.btn-default, .btn-default.active {
    &:active, &.active, &.active:focus, &:active.focus, &:active:focus {
        &:not([disabled]):not(.btn-round) {
            box-shadow: none;
            color: $button-fg;
            background-color: $primary-colour;
            @include transform(scale(1.02, 1.1));
            border-radius: 2px !important;
        }
    }
}
.btn-default.ui-select-toggle:not([disabled]):not(.btn-round) {
    &:active, &:active:focus {
        background-color: $button-bg;
        @include transform(scale(1));
        border-radius: 4px !important;
    }
}

// On large screens, arrange horizontally
@media (min-width: 768px) {
    .btn-group.btn-group-justified {
        border-spacing: initial;
    }
}
// On small screens, stack vertically
@media (max-width: 768px) {
    .btn-group.btn-group-justified {
        display: block;
        > .btn-group {
            display: block;
            width: 100%;
            + .btn-group {
                margin-left: 0;
            }
            .btn {
                display: block;
                float: none;
                width: 100%;
            }
            &:not(:first-child):not(:last-child) > .btn {
                border-radius: 0 0 0 0;
            }
            &:first-child:not(:last-child) > .btn {
                border-radius: 4px 4px 0 0;
            }
            &:last-child:not(:first-child) > .btn {
                border-radius: 0 0 4px 4px;
            }
        }
    }
}

.ui-select-match.btn-default-focus {
    outline: none;
    box-shadow: none;
    border-color: transparent;
    background-color: transparent;
}
.ui-select-container + p {
  margin-top: 8px;
}

.has-error {
    .form-control {
        box-shadow: none;
        background: #FFE3E3;
        border-color: transparent;

        &:hover, &:active, &.active:focus, &:focus, &:active.focus, &:active:focus {
            border-color: transparent;
            border-bottom-color: #FF9595;
            background: #FFf0f0;
            box-shadow: none;
        }
    }
}

:not(ng-include):not(.nested)>.header .btn-default, .well .btn-default {
    &:not([disabled]) {
        color: lighten($button-fg, 30%);
    }
    background-color: white;
    border-color: transparent;

    &:hover, &:active, &.active:focus, &:focus, &:active.focus, &:active:focus {
        outline: none;
        border-color: transparent;
    }
    &:hover, &.active:focus, &:focus {
        &:not([disabled]) {
            background-color: lighten($button-bg, 3%);
            color: $button-fg;
            border-bottom-color: rgba($primary-col, 0.5);
        }
    }
    &:active, &.active, &.active:focus, &:active.focus, &:active:focus {
        &:not([disabled]) {
            box-shadow: none;
            color: $button-fg;
        }
    }
}
.well {
    border: none;
    box-shadow: none;
    border-radius: 4px;

    textarea, .btn-default[disabled] {
        background: white;
    }
}

.btn-on-danger {
    &:hover, &.active:focus, &:focus {
        border-bottom-color: rgba($danger-col, 0.5);
    }
    &:active, &.active, &.active:focus, &:active.focus, &:active:focus {
        border-bottom-color: transparent;
        background: lighten($danger-col, 10%);
        color: white;
    }
}

.secondary .btn {
    background-color: white;
}

.help-label {
    color: #888;
}

.tabular-form {
    padding: 0;
    display: table;
    width: 100%;

    > * {
        list-style: none;
        display: table-row;

        > * {
            display: table-cell;
            padding: 8px;
            margin: 0;

            > input[type=text] {
                margin-left: -12px;
                margin-right: -12px;
            }
        }
    }
}

.messages {
    position: fixed;
    left: 0;
    bottom: 0;
    right: 0;
    z-index: 5000;
    padding-top: 6px;
    font-size: 150%;

    ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    li {
        padding-top: 6px;
        padding-bottom: 6px;
    }
    li.animate {
        opacity: 1;
        @include transition-property(opacity);
        @include transition-duration($anim-time);

        &.ng-enter {
            opacity: 0;
        }
        &.ng-leave.ng-leave-active {
            opacity: 0;
        }
    }
    .btn-default {
        background: transparent;
    }
    .btn-round {
        margin-top: 2px;
        margin-bottom: -3px;
    }
}
